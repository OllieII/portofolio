{"ast":null,"code":"// utils.js\n\n// Generate a normally distributed random number using the Box-Muller transform\nconst generateNormalRandom = (mean, stdDev) => {\n  let u1 = 0,\n    u2 = 0;\n  // Convert [0,1) to (0,1)\n  while (u1 === 0) u1 = Math.random();\n  while (u2 === 0) u2 = Math.random();\n  const z0 = Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(2.0 * Math.PI * u2);\n  // Scale and shift to the desired mean and standard deviation\n  return z0 * stdDev + mean;\n};\n\n// Generate random position around a center point with given width and height\nconst generateRandomPosition = (centerX, centerY, width, height) => {\n  let x, y;\n  do {\n    // Generate two independent standard normal variates using Box-Muller transform\n    let u1 = Math.random();\n    let u2 = Math.random();\n    let z1 = Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(2.0 * Math.PI * u2);\n    let z2 = Math.sqrt(-2.0 * Math.log(u1)) * Math.sin(2.0 * Math.PI * u2);\n\n    // Scale and shift to get the coordinates\n    x = centerX + z1 * (width / 2);\n    y = centerY + z2 * (height / 2);\n  } while (x < centerX - width / 2 || x > centerX + width / 2 || y < centerY - height / 2 || y > centerY + height / 2);\n  return {\n    x,\n    y\n  };\n};\n\n// Generate a set of random positions around a center point\nexport const generateRandomPositions = (centerX, centerY, width, height, numPoints) => {\n  const points = [];\n  for (let i = 0; i < numPoints; i++) {\n    const {\n      x,\n      y\n    } = generateRandomPosition(centerX, centerY, width, height);\n    points.push({\n      x,\n      y\n    });\n  }\n  return points;\n};","map":{"version":3,"names":["generateNormalRandom","mean","stdDev","u1","u2","Math","random","z0","sqrt","log","cos","PI","generateRandomPosition","centerX","centerY","width","height","x","y","z1","z2","sin","generateRandomPositions","numPoints","points","i","push"],"sources":["C:/Users/ZiQi/Desktop/新建文件夹/portofolio/portofolio/src/Components/Skills/utils.js"],"sourcesContent":["// utils.js\r\n\r\n// Generate a normally distributed random number using the Box-Muller transform\r\nconst generateNormalRandom = (mean, stdDev) => {\r\n  let u1 = 0, u2 = 0;\r\n  // Convert [0,1) to (0,1)\r\n  while (u1 === 0) u1 = Math.random();\r\n  while (u2 === 0) u2 = Math.random();\r\n  const z0 = Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(2.0 * Math.PI * u2);\r\n  // Scale and shift to the desired mean and standard deviation\r\n  return z0 * stdDev + mean;\r\n};\r\n\r\n// Generate random position around a center point with given width and height\r\nconst generateRandomPosition = (centerX, centerY, width, height) => {\r\n  let x, y;\r\n  do {\r\n    // Generate two independent standard normal variates using Box-Muller transform\r\n    let u1 = Math.random();\r\n    let u2 = Math.random();\r\n    let z1 = Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(2.0 * Math.PI * u2);\r\n    let z2 = Math.sqrt(-2.0 * Math.log(u1)) * Math.sin(2.0 * Math.PI * u2);\r\n\r\n    // Scale and shift to get the coordinates\r\n    x = centerX + z1 * (width / 2);\r\n    y = centerY + z2 * (height / 2);\r\n  } while (x < centerX - width / 2 || x > centerX + width / 2 || y < centerY - height / 2 || y > centerY + height / 2);\r\n\r\n  return { x, y };\r\n};\r\n\r\n// Generate a set of random positions around a center point\r\nexport const generateRandomPositions = (centerX, centerY, width, height, numPoints) => {\r\n  const points = [];\r\n  for (let i = 0; i < numPoints; i++) {\r\n    const { x, y } = generateRandomPosition(centerX, centerY, width, height);\r\n    points.push({ x, y });\r\n  }\r\n  return points;\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA,MAAMA,oBAAoB,GAAGA,CAACC,IAAI,EAAEC,MAAM,KAAK;EAC7C,IAAIC,EAAE,GAAG,CAAC;IAAEC,EAAE,GAAG,CAAC;EAClB;EACA,OAAOD,EAAE,KAAK,CAAC,EAAEA,EAAE,GAAGE,IAAI,CAACC,MAAM,CAAC,CAAC;EACnC,OAAOF,EAAE,KAAK,CAAC,EAAEA,EAAE,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC;EACnC,MAAMC,EAAE,GAAGF,IAAI,CAACG,IAAI,CAAC,CAAC,GAAG,GAAGH,IAAI,CAACI,GAAG,CAACN,EAAE,CAAC,CAAC,GAAGE,IAAI,CAACK,GAAG,CAAC,GAAG,GAAGL,IAAI,CAACM,EAAE,GAAGP,EAAE,CAAC;EACxE;EACA,OAAOG,EAAE,GAAGL,MAAM,GAAGD,IAAI;AAC3B,CAAC;;AAED;AACA,MAAMW,sBAAsB,GAAGA,CAACC,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,MAAM,KAAK;EAClE,IAAIC,CAAC,EAAEC,CAAC;EACR,GAAG;IACD;IACA,IAAIf,EAAE,GAAGE,IAAI,CAACC,MAAM,CAAC,CAAC;IACtB,IAAIF,EAAE,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC;IACtB,IAAIa,EAAE,GAAGd,IAAI,CAACG,IAAI,CAAC,CAAC,GAAG,GAAGH,IAAI,CAACI,GAAG,CAACN,EAAE,CAAC,CAAC,GAAGE,IAAI,CAACK,GAAG,CAAC,GAAG,GAAGL,IAAI,CAACM,EAAE,GAAGP,EAAE,CAAC;IACtE,IAAIgB,EAAE,GAAGf,IAAI,CAACG,IAAI,CAAC,CAAC,GAAG,GAAGH,IAAI,CAACI,GAAG,CAACN,EAAE,CAAC,CAAC,GAAGE,IAAI,CAACgB,GAAG,CAAC,GAAG,GAAGhB,IAAI,CAACM,EAAE,GAAGP,EAAE,CAAC;;IAEtE;IACAa,CAAC,GAAGJ,OAAO,GAAGM,EAAE,IAAIJ,KAAK,GAAG,CAAC,CAAC;IAC9BG,CAAC,GAAGJ,OAAO,GAAGM,EAAE,IAAIJ,MAAM,GAAG,CAAC,CAAC;EACjC,CAAC,QAAQC,CAAC,GAAGJ,OAAO,GAAGE,KAAK,GAAG,CAAC,IAAIE,CAAC,GAAGJ,OAAO,GAAGE,KAAK,GAAG,CAAC,IAAIG,CAAC,GAAGJ,OAAO,GAAGE,MAAM,GAAG,CAAC,IAAIE,CAAC,GAAGJ,OAAO,GAAGE,MAAM,GAAG,CAAC;EAEnH,OAAO;IAAEC,CAAC;IAAEC;EAAE,CAAC;AACjB,CAAC;;AAED;AACA,OAAO,MAAMI,uBAAuB,GAAGA,CAACT,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,MAAM,EAAEO,SAAS,KAAK;EACrF,MAAMC,MAAM,GAAG,EAAE;EACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,EAAEE,CAAC,EAAE,EAAE;IAClC,MAAM;MAAER,CAAC;MAAEC;IAAE,CAAC,GAAGN,sBAAsB,CAACC,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,MAAM,CAAC;IACxEQ,MAAM,CAACE,IAAI,CAAC;MAAET,CAAC;MAAEC;IAAE,CAAC,CAAC;EACvB;EACA,OAAOM,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}