{"ast":null,"code":"export const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\nexport const generateNonOverlappingPosition = (size, existingPositions, containerSize, originalPosition) => {\n  let position;\n  let overlap;\n  const maxAttempts = 1000;\n  let attempts = 0;\n  console.log(`Generating non-overlapping position for size ${size} within container ${containerSize.width}x${containerSize.height}`);\n  do {\n    overlap = false;\n    const generateRandomPosition = (centerX, centerY, width, height) => {\n      let x, y;\n      do {\n        // Generate two independent standard normal variates using Box-Muller transform\n        let u1 = Math.random();\n        let u2 = Math.random();\n        let z1 = Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(2.0 * Math.PI * u2);\n        let z2 = Math.sqrt(-2.0 * Math.log(u1)) * Math.sin(2.0 * Math.PI * u2);\n\n        // Scale and shift to get the coordinates\n        x = centerX + z1 * (width / 2);\n        y = centerY + z2 * (height / 2);\n      } while (x < centerX - width / 2 || x > centerX + width / 2 || y < centerY - height / 2 || y > centerY + height / 2);\n      return {\n        x,\n        y\n      };\n    };\n    for (let existing of existingPositions) {\n      if (Math.abs(position.x - existing.x) < size && Math.abs(position.y - existing.y) < size) {\n        overlap = true;\n        break;\n      }\n    }\n    attempts++;\n  } while (overlap && attempts < maxAttempts);\n  console.log(`Generated position: ${position.x}, ${position.y} after ${attempts} attempts for large bubble at ${originalPosition.x}, ${originalPosition.y}, ymax is ${originalPosition.y + containerSize.height}, xmax is ${originalPosition.x + containerSize.width}, ymin is ${originalPosition.y - containerSize.height}, xmin is ${originalPosition.x - containerSize.width}`);\n  return position;\n};","map":{"version":3,"names":["getRandomInt","min","max","Math","floor","random","generateNonOverlappingPosition","size","existingPositions","containerSize","originalPosition","position","overlap","maxAttempts","attempts","console","log","width","height","generateRandomPosition","centerX","centerY","x","y","u1","u2","z1","sqrt","cos","PI","z2","sin","existing","abs"],"sources":["C:/Users/ZiQi/Desktop/新建文件夹/portofolio/portofolio/src/Components/Skills/utils.js"],"sourcesContent":["export const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\nexport const generateNonOverlappingPosition = (size, existingPositions, containerSize, originalPosition) => {\r\n  let position;\r\n  let overlap;\r\n  const maxAttempts = 1000;\r\n  let attempts = 0;\r\n\r\n  console.log(`Generating non-overlapping position for size ${size} within container ${containerSize.width}x${containerSize.height}`);\r\n\r\n  do {\r\n    overlap = false;\r\n    const generateRandomPosition = (centerX, centerY, width, height) => {\r\n      let x, y;\r\n      do {\r\n        // Generate two independent standard normal variates using Box-Muller transform\r\n        let u1 = Math.random();\r\n        let u2 = Math.random();\r\n        let z1 = Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(2.0 * Math.PI * u2);\r\n        let z2 = Math.sqrt(-2.0 * Math.log(u1)) * Math.sin(2.0 * Math.PI * u2);\r\n  \r\n        // Scale and shift to get the coordinates\r\n        x = centerX + z1 * (width / 2);\r\n        y = centerY + z2 * (height / 2);\r\n      } while (x < centerX - width / 2 || x > centerX + width / 2 || y < centerY - height / 2 || y > centerY + height / 2);\r\n  \r\n      return { x, y };\r\n    };\r\n    for (let existing of existingPositions) {\r\n      if (Math.abs(position.x - existing.x) < size && Math.abs(position.y - existing.y) < size) {\r\n        overlap = true;\r\n        break;\r\n      }\r\n    }\r\n    attempts++;\r\n  } while (overlap && attempts < maxAttempts);\r\n\r\n  console.log(`Generated position: ${position.x}, ${position.y} after ${attempts} attempts for large bubble at ${originalPosition.x}, ${originalPosition.y}, ymax is ${originalPosition.y+containerSize.height}, xmax is ${originalPosition.x+containerSize.width}, ymin is ${originalPosition.y-containerSize.height}, xmin is ${originalPosition.x-containerSize.width}`);\r\n\r\n  return position;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}