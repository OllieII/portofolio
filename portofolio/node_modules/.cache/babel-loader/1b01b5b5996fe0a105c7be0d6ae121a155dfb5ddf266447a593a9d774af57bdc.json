{"ast":null,"code":"// utils.js\n\n// Generate a random integer between min and max (inclusive)\nexport const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\nexport const generateNonOverlappingPosition = (size, existingPositions, containerSize, originalPosition) => {\n  let position;\n  let overlap;\n  const maxAttempts = 1000;\n  let attempts = 0;\n  console.log(`Generating non-overlapping position for size ${size} within container ${containerSize.width}x${containerSize.height}`);\n  do {\n    overlap = false;\n\n    // Correctly calculate the bounds ensuring they do not go negative\n    let xmin = Math.max(originalPosition.x - containerSize.width / 2, size);\n    let xmax = Math.min(originalPosition.x + containerSize.width / 2, containerSize.width - size);\n    let ymin = Math.max(originalPosition.y - containerSize.height / 2, size);\n    let ymax = Math.min(originalPosition.y + containerSize.height / 2, containerSize.height - size);\n    position = {\n      x: getRandomInt(xmin, xmax),\n      y: getRandomInt(ymin, ymax)\n    };\n    for (let existing of existingPositions) {\n      if (Math.abs(position.x - existing.x) < size && Math.abs(position.y - existing.y) < size) {\n        overlap = true;\n        break;\n      }\n    }\n    console.log(`Generated position: ${position.x}, ${position.y} after ${attempts} attempts for large bubble at ${originalPosition.x}, ${originalPosition.y}, ymax is ${ymax}, xmax is ${xmax}, ymin is ${ymin}, xmin is ${xmin}`);\n    attempts++;\n  } while (overlap && attempts < maxAttempts);\n  return position;\n};","map":{"version":3,"names":["getRandomInt","min","max","Math","floor","random","generateNonOverlappingPosition","size","existingPositions","containerSize","originalPosition","position","overlap","maxAttempts","attempts","console","log","width","height","xmin","x","xmax","ymin","y","ymax","existing","abs"],"sources":["C:/Users/ZiQi/Desktop/新建文件夹/portofolio/portofolio/src/Components/Skills/utils.js"],"sourcesContent":["// utils.js\r\n\r\n// Generate a random integer between min and max (inclusive)\r\nexport const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\nexport const generateNonOverlappingPosition = (size, existingPositions, containerSize, originalPosition) => {\r\n  let position;\r\n  let overlap;\r\n  const maxAttempts = 1000;\r\n  let attempts = 0;\r\n\r\n  console.log(`Generating non-overlapping position for size ${size} within container ${containerSize.width}x${containerSize.height}`);\r\n\r\n  do {\r\n    overlap = false;\r\n\r\n    // Correctly calculate the bounds ensuring they do not go negative\r\n    let xmin = Math.max(originalPosition.x - containerSize.width / 2, size);\r\n    let xmax = Math.min(originalPosition.x + containerSize.width / 2, containerSize.width - size);\r\n    let ymin = Math.max(originalPosition.y - containerSize.height / 2, size);\r\n    let ymax = Math.min(originalPosition.y + containerSize.height / 2, containerSize.height - size);\r\n    \r\n    position = {\r\n      x: getRandomInt(xmin, xmax),\r\n      y: getRandomInt(ymin, ymax)\r\n    };\r\n\r\n    for (let existing of existingPositions) {\r\n      if (Math.abs(position.x - existing.x) < size && Math.abs(position.y - existing.y) < size) {\r\n        overlap = true;\r\n        break;\r\n      }\r\n    }\r\n    console.log(`Generated position: ${position.x}, ${position.y} after ${attempts} attempts for large bubble at ${originalPosition.x}, ${originalPosition.y}, ymax is ${ymax}, xmax is ${xmax}, ymin is ${ymin}, xmin is ${xmin}`);\r\n\r\n    attempts++;\r\n  } while (overlap && attempts < maxAttempts);\r\n\r\n\r\n  return position;\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,YAAY,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAKC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIH,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG;AAE3F,OAAO,MAAMK,8BAA8B,GAAGA,CAACC,IAAI,EAAEC,iBAAiB,EAAEC,aAAa,EAAEC,gBAAgB,KAAK;EAC1G,IAAIC,QAAQ;EACZ,IAAIC,OAAO;EACX,MAAMC,WAAW,GAAG,IAAI;EACxB,IAAIC,QAAQ,GAAG,CAAC;EAEhBC,OAAO,CAACC,GAAG,CAAC,gDAAgDT,IAAI,qBAAqBE,aAAa,CAACQ,KAAK,IAAIR,aAAa,CAACS,MAAM,EAAE,CAAC;EAEnI,GAAG;IACDN,OAAO,GAAG,KAAK;;IAEf;IACA,IAAIO,IAAI,GAAGhB,IAAI,CAACD,GAAG,CAACQ,gBAAgB,CAACU,CAAC,GAAGX,aAAa,CAACQ,KAAK,GAAG,CAAC,EAAEV,IAAI,CAAC;IACvE,IAAIc,IAAI,GAAGlB,IAAI,CAACF,GAAG,CAACS,gBAAgB,CAACU,CAAC,GAAGX,aAAa,CAACQ,KAAK,GAAG,CAAC,EAAER,aAAa,CAACQ,KAAK,GAAGV,IAAI,CAAC;IAC7F,IAAIe,IAAI,GAAGnB,IAAI,CAACD,GAAG,CAACQ,gBAAgB,CAACa,CAAC,GAAGd,aAAa,CAACS,MAAM,GAAG,CAAC,EAAEX,IAAI,CAAC;IACxE,IAAIiB,IAAI,GAAGrB,IAAI,CAACF,GAAG,CAACS,gBAAgB,CAACa,CAAC,GAAGd,aAAa,CAACS,MAAM,GAAG,CAAC,EAAET,aAAa,CAACS,MAAM,GAAGX,IAAI,CAAC;IAE/FI,QAAQ,GAAG;MACTS,CAAC,EAAEpB,YAAY,CAACmB,IAAI,EAAEE,IAAI,CAAC;MAC3BE,CAAC,EAAEvB,YAAY,CAACsB,IAAI,EAAEE,IAAI;IAC5B,CAAC;IAED,KAAK,IAAIC,QAAQ,IAAIjB,iBAAiB,EAAE;MACtC,IAAIL,IAAI,CAACuB,GAAG,CAACf,QAAQ,CAACS,CAAC,GAAGK,QAAQ,CAACL,CAAC,CAAC,GAAGb,IAAI,IAAIJ,IAAI,CAACuB,GAAG,CAACf,QAAQ,CAACY,CAAC,GAAGE,QAAQ,CAACF,CAAC,CAAC,GAAGhB,IAAI,EAAE;QACxFK,OAAO,GAAG,IAAI;QACd;MACF;IACF;IACAG,OAAO,CAACC,GAAG,CAAC,uBAAuBL,QAAQ,CAACS,CAAC,KAAKT,QAAQ,CAACY,CAAC,UAAUT,QAAQ,iCAAiCJ,gBAAgB,CAACU,CAAC,KAAKV,gBAAgB,CAACa,CAAC,aAAaC,IAAI,aAAaH,IAAI,aAAaC,IAAI,aAAaH,IAAI,EAAE,CAAC;IAE/NL,QAAQ,EAAE;EACZ,CAAC,QAAQF,OAAO,IAAIE,QAAQ,GAAGD,WAAW;EAG1C,OAAOF,QAAQ;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}