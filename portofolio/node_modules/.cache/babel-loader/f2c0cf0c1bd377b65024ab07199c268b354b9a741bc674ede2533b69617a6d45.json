{"ast":null,"code":"export const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\nexport const generateNonOverlappingPosition = (size, existingPositions, containerSize, originalPosition) => {\n  let position;\n  let overlap;\n  const maxAttempts = 1000;\n  let attempts = 0;\n  console.log(`Generating non-overlapping position for size ${size} within container ${containerSize.width}x${containerSize.height}`);\n  do {\n    overlap = false;\n    let xmin = originalPosition.x - containerSize.width;\n    let xmax = originalPosition.x + containerSize.width;\n    let ymin = originalPosition.y - containerSize.height;\n    let ymax = originalPosition.y + containerSize.height;\n    position = {\n      x: getRandomInt(xmin - size < 0 ? 0 : xmin, xmax + size > containerSize.width ? containerSize.width : xmax),\n      y: getRandomInt(ymin - size < 0 ? 0 : ymin, ymax + size > containerSize.height ? containerSize.height : ymax)\n    };\n    for (let existing of existingPositions) {\n      if (Math.abs(position.x - existing.x) < size && Math.abs(position.y - existing.y) < size) {\n        overlap = true;\n        break;\n      }\n    }\n    attempts++;\n  } while (overlap && attempts < maxAttempts);\n  console.log(`Generated position: ${position.x}, ${position.y} after ${attempts} attempts for large bubble at ${originalPosition.x}, ${originalPosition.y}, ymax is ${originalPosition.y + containerSize.height}, xmax is ${originalPosition.x + containerSize.width}`);\n  return position;\n};","map":{"version":3,"names":["getRandomInt","min","max","Math","floor","random","generateNonOverlappingPosition","size","existingPositions","containerSize","originalPosition","position","overlap","maxAttempts","attempts","console","log","width","height","xmin","x","xmax","ymin","y","ymax","existing","abs"],"sources":["C:/Users/ZiQi/Desktop/新建文件夹/portofolio/portofolio/src/Components/Skills/utils.js"],"sourcesContent":["export const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\nexport const generateNonOverlappingPosition = (size, existingPositions, containerSize, originalPosition) => {\r\n  let position;\r\n  let overlap;\r\n  const maxAttempts = 1000;\r\n  let attempts = 0;\r\n\r\n  console.log(`Generating non-overlapping position for size ${size} within container ${containerSize.width}x${containerSize.height}`);\r\n\r\n  do {\r\n    overlap = false;\r\n    let xmin = originalPosition.x-containerSize.width;\r\n    let xmax = originalPosition.x+containerSize.width;\r\n    let ymin = originalPosition.y-containerSize.height;\r\n    let ymax = originalPosition.y+containerSize.height;\r\n    position = {\r\n      x: getRandomInt(xmin-size<0?0:xmin, xmax+size>containerSize.width?containerSize.width:xmax),\r\n      y: getRandomInt(ymin-size<0?0:ymin, ymax+size>containerSize.height?containerSize.height:ymax)\r\n    };\r\n    for (let existing of existingPositions) {\r\n      if (Math.abs(position.x - existing.x) < size && Math.abs(position.y - existing.y) < size) {\r\n        overlap = true;\r\n        break;\r\n      }\r\n    }\r\n    attempts++;\r\n  } while (overlap && attempts < maxAttempts);\r\n\r\n  console.log(`Generated position: ${position.x}, ${position.y} after ${attempts} attempts for large bubble at ${originalPosition.x}, ${originalPosition.y}, ymax is ${originalPosition.y+containerSize.height}, xmax is ${originalPosition.x+containerSize.width}`);\r\n\r\n  return position;\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAKC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIH,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG;AAE3F,OAAO,MAAMK,8BAA8B,GAAGA,CAACC,IAAI,EAAEC,iBAAiB,EAAEC,aAAa,EAAEC,gBAAgB,KAAK;EAC1G,IAAIC,QAAQ;EACZ,IAAIC,OAAO;EACX,MAAMC,WAAW,GAAG,IAAI;EACxB,IAAIC,QAAQ,GAAG,CAAC;EAEhBC,OAAO,CAACC,GAAG,CAAC,gDAAgDT,IAAI,qBAAqBE,aAAa,CAACQ,KAAK,IAAIR,aAAa,CAACS,MAAM,EAAE,CAAC;EAEnI,GAAG;IACDN,OAAO,GAAG,KAAK;IACf,IAAIO,IAAI,GAAGT,gBAAgB,CAACU,CAAC,GAACX,aAAa,CAACQ,KAAK;IACjD,IAAII,IAAI,GAAGX,gBAAgB,CAACU,CAAC,GAACX,aAAa,CAACQ,KAAK;IACjD,IAAIK,IAAI,GAAGZ,gBAAgB,CAACa,CAAC,GAACd,aAAa,CAACS,MAAM;IAClD,IAAIM,IAAI,GAAGd,gBAAgB,CAACa,CAAC,GAACd,aAAa,CAACS,MAAM;IAClDP,QAAQ,GAAG;MACTS,CAAC,EAAEpB,YAAY,CAACmB,IAAI,GAACZ,IAAI,GAAC,CAAC,GAAC,CAAC,GAACY,IAAI,EAAEE,IAAI,GAACd,IAAI,GAACE,aAAa,CAACQ,KAAK,GAACR,aAAa,CAACQ,KAAK,GAACI,IAAI,CAAC;MAC3FE,CAAC,EAAEvB,YAAY,CAACsB,IAAI,GAACf,IAAI,GAAC,CAAC,GAAC,CAAC,GAACe,IAAI,EAAEE,IAAI,GAACjB,IAAI,GAACE,aAAa,CAACS,MAAM,GAACT,aAAa,CAACS,MAAM,GAACM,IAAI;IAC9F,CAAC;IACD,KAAK,IAAIC,QAAQ,IAAIjB,iBAAiB,EAAE;MACtC,IAAIL,IAAI,CAACuB,GAAG,CAACf,QAAQ,CAACS,CAAC,GAAGK,QAAQ,CAACL,CAAC,CAAC,GAAGb,IAAI,IAAIJ,IAAI,CAACuB,GAAG,CAACf,QAAQ,CAACY,CAAC,GAAGE,QAAQ,CAACF,CAAC,CAAC,GAAGhB,IAAI,EAAE;QACxFK,OAAO,GAAG,IAAI;QACd;MACF;IACF;IACAE,QAAQ,EAAE;EACZ,CAAC,QAAQF,OAAO,IAAIE,QAAQ,GAAGD,WAAW;EAE1CE,OAAO,CAACC,GAAG,CAAC,uBAAuBL,QAAQ,CAACS,CAAC,KAAKT,QAAQ,CAACY,CAAC,UAAUT,QAAQ,iCAAiCJ,gBAAgB,CAACU,CAAC,KAAKV,gBAAgB,CAACa,CAAC,aAAab,gBAAgB,CAACa,CAAC,GAACd,aAAa,CAACS,MAAM,aAAaR,gBAAgB,CAACU,CAAC,GAACX,aAAa,CAACQ,KAAK,EAAE,CAAC;EAElQ,OAAON,QAAQ;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}