{"ast":null,"code":"// Generate a normally distributed random number using the Box-Muller transform\nexport const generateNormalRandom = (mean, stdDev) => {\n  let u1 = 0,\n    u2 = 0;\n  // Convert [0,1) to (0,1)\n  while (u1 === 0) u1 = Math.random();\n  while (u2 === 0) u2 = Math.random();\n  const z0 = Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(2.0 * Math.PI * u2);\n  // Scale and shift to the desired mean and standard deviation\n  return z0 * stdDev + mean;\n};\n\n// Existing utility functions\nexport const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\nexport const generateNonOverlappingPosition = (size, existingPositions, containerSize) => {\n  let position;\n  let overlap;\n  const maxAttempts = 1000;\n  let attempts = 0;\n  console.log(`Generating non-overlapping position for size ${size} within container ${containerSize.width}x${containerSize.height}`);\n  do {\n    overlap = false;\n    position = {\n      x: generateNormalRandom(containerSize.width / 2, containerSize.width / 8) - size / 2,\n      y: generateNormalRandom(containerSize.height / 2, containerSize.height / 8) - size / 2\n    };\n    for (let existing of existingPositions) {\n      if (Math.abs(position.x - existing.x) < size && Math.abs(position.y - existing.y) < size) {\n        overlap = true;\n        break;\n      }\n    }\n    attempts++;\n  } while (overlap && attempts < maxAttempts);\n  console.log(`Generated position: ${position.x}, ${position.y} after ${attempts} attempts`);\n  return position;\n};","map":{"version":3,"names":["generateNormalRandom","mean","stdDev","u1","u2","Math","random","z0","sqrt","log","cos","PI","getRandomInt","min","max","floor","generateNonOverlappingPosition","size","existingPositions","containerSize","position","overlap","maxAttempts","attempts","console","width","height","x","y","existing","abs"],"sources":["C:/Users/ZiQi/Desktop/新建文件夹/portofolio/portofolio/src/Components/Skills/utils.js"],"sourcesContent":["// Generate a normally distributed random number using the Box-Muller transform\r\nexport const generateNormalRandom = (mean, stdDev) => {\r\n  let u1 = 0, u2 = 0;\r\n  // Convert [0,1) to (0,1)\r\n  while (u1 === 0) u1 = Math.random();\r\n  while (u2 === 0) u2 = Math.random();\r\n  const z0 = Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(2.0 * Math.PI * u2);\r\n  // Scale and shift to the desired mean and standard deviation\r\n  return z0 * stdDev + mean;\r\n};\r\n\r\n// Existing utility functions\r\nexport const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\nexport const generateNonOverlappingPosition = (size, existingPositions, containerSize) => {\r\n  let position;\r\n  let overlap;\r\n  const maxAttempts = 1000;\r\n  let attempts = 0;\r\n\r\n  console.log(`Generating non-overlapping position for size ${size} within container ${containerSize.width}x${containerSize.height}`);\r\n\r\n  do {\r\n    overlap = false;\r\n    position = {\r\n      x: generateNormalRandom(containerSize.width / 2, containerSize.width / 8) - size / 2,\r\n      y: generateNormalRandom(containerSize.height / 2, containerSize.height / 8) - size / 2\r\n    };\r\n    for (let existing of existingPositions) {\r\n      if (Math.abs(position.x - existing.x) < size && Math.abs(position.y - existing.y) < size) {\r\n        overlap = true;\r\n        break;\r\n      }\r\n    }\r\n    attempts++;\r\n  } while (overlap && attempts < maxAttempts);\r\n\r\n  console.log(`Generated position: ${position.x}, ${position.y} after ${attempts} attempts`);\r\n\r\n  return position;\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,oBAAoB,GAAGA,CAACC,IAAI,EAAEC,MAAM,KAAK;EACpD,IAAIC,EAAE,GAAG,CAAC;IAAEC,EAAE,GAAG,CAAC;EAClB;EACA,OAAOD,EAAE,KAAK,CAAC,EAAEA,EAAE,GAAGE,IAAI,CAACC,MAAM,CAAC,CAAC;EACnC,OAAOF,EAAE,KAAK,CAAC,EAAEA,EAAE,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC;EACnC,MAAMC,EAAE,GAAGF,IAAI,CAACG,IAAI,CAAC,CAAC,GAAG,GAAGH,IAAI,CAACI,GAAG,CAACN,EAAE,CAAC,CAAC,GAAGE,IAAI,CAACK,GAAG,CAAC,GAAG,GAAGL,IAAI,CAACM,EAAE,GAAGP,EAAE,CAAC;EACxE;EACA,OAAOG,EAAE,GAAGL,MAAM,GAAGD,IAAI;AAC3B,CAAC;;AAED;AACA,OAAO,MAAMW,YAAY,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAKT,IAAI,CAACU,KAAK,CAACV,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIQ,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG;AAE3F,OAAO,MAAMG,8BAA8B,GAAGA,CAACC,IAAI,EAAEC,iBAAiB,EAAEC,aAAa,KAAK;EACxF,IAAIC,QAAQ;EACZ,IAAIC,OAAO;EACX,MAAMC,WAAW,GAAG,IAAI;EACxB,IAAIC,QAAQ,GAAG,CAAC;EAEhBC,OAAO,CAACf,GAAG,CAAC,gDAAgDQ,IAAI,qBAAqBE,aAAa,CAACM,KAAK,IAAIN,aAAa,CAACO,MAAM,EAAE,CAAC;EAEnI,GAAG;IACDL,OAAO,GAAG,KAAK;IACfD,QAAQ,GAAG;MACTO,CAAC,EAAE3B,oBAAoB,CAACmB,aAAa,CAACM,KAAK,GAAG,CAAC,EAAEN,aAAa,CAACM,KAAK,GAAG,CAAC,CAAC,GAAGR,IAAI,GAAG,CAAC;MACpFW,CAAC,EAAE5B,oBAAoB,CAACmB,aAAa,CAACO,MAAM,GAAG,CAAC,EAAEP,aAAa,CAACO,MAAM,GAAG,CAAC,CAAC,GAAGT,IAAI,GAAG;IACvF,CAAC;IACD,KAAK,IAAIY,QAAQ,IAAIX,iBAAiB,EAAE;MACtC,IAAIb,IAAI,CAACyB,GAAG,CAACV,QAAQ,CAACO,CAAC,GAAGE,QAAQ,CAACF,CAAC,CAAC,GAAGV,IAAI,IAAIZ,IAAI,CAACyB,GAAG,CAACV,QAAQ,CAACQ,CAAC,GAAGC,QAAQ,CAACD,CAAC,CAAC,GAAGX,IAAI,EAAE;QACxFI,OAAO,GAAG,IAAI;QACd;MACF;IACF;IACAE,QAAQ,EAAE;EACZ,CAAC,QAAQF,OAAO,IAAIE,QAAQ,GAAGD,WAAW;EAE1CE,OAAO,CAACf,GAAG,CAAC,uBAAuBW,QAAQ,CAACO,CAAC,KAAKP,QAAQ,CAACQ,CAAC,UAAUL,QAAQ,WAAW,CAAC;EAE1F,OAAOH,QAAQ;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}