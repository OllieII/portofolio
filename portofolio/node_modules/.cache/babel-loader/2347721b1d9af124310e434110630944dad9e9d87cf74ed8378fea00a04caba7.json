{"ast":null,"code":"// utils.js\n// Generate a random integer between min and max (inclusive)\nexport const getRandomInt=(min,max)=>Math.floor(Math.random()*(max-min+1))+min;export const generateNonOverlappingPosition=(size,existingPositions,containerSize,originalPosition)=>{let position;let overlap;const maxAttempts=2000;let attempts=0;console.log(\"Generating non-overlapping position for size \".concat(size,\" within container \").concat(containerSize.width,\"x\").concat(containerSize.height));do{overlap=false;let xmax=containerSize.width-size;let ymax=containerSize.height-size;position={x:getRandomInt(0,xmax),y:getRandomInt(0,ymax)};for(let existing of existingPositions){if(Math.abs(position.x-existing.x)<size&&Math.abs(position.y-existing.y)<size){overlap=true;break;}}console.log(\"Generated position: \".concat(position.x,\", \").concat(position.y,\" after \").concat(attempts,\" attempts for large bubble at \").concat(originalPosition.x,\", \").concat(originalPosition.y,\", ymax is \").concat(ymax,\", xmax is \").concat(xmax,\", ymin is \").concat(originalPosition.y,\", xmin is \").concat(originalPosition.x));attempts++;}while(overlap&&attempts<maxAttempts);return{position,overlap};};export const fetchPositionsFromFile=async filename=>{const response=await fetch(\"\".concat(process.env.PUBLIC_URL,\"/position/\").concat(filename));if(!response.ok){throw new Error('Network response was not ok');}return await response.json();};","map":{"version":3,"names":["getRandomInt","min","max","Math","floor","random","generateNonOverlappingPosition","size","existingPositions","containerSize","originalPosition","position","overlap","maxAttempts","attempts","console","log","concat","width","height","xmax","ymax","x","y","existing","abs","fetchPositionsFromFile","filename","response","fetch","process","env","PUBLIC_URL","ok","Error","json"],"sources":["C:/Users/ZiQi/Desktop/新建文件夹/portofolio/portofolio/src/Components/Skills/utils.js"],"sourcesContent":["// utils.js\r\n\r\n// Generate a random integer between min and max (inclusive)\r\nexport const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\nexport const generateNonOverlappingPosition = (size, existingPositions, containerSize, originalPosition) => {\r\n  let position;\r\n  let overlap;\r\n  const maxAttempts = 2000;\r\n  let attempts = 0;\r\n\r\n  console.log(`Generating non-overlapping position for size ${size} within container ${containerSize.width}x${containerSize.height}`);\r\n\r\n  do {\r\n    overlap = false;\r\n\r\n    let xmax = containerSize.width - size;\r\n    let ymax = containerSize.height - size;\r\n    \r\n    position = {\r\n      x: getRandomInt(0, xmax),\r\n      y: getRandomInt(0, ymax)\r\n    };\r\n\r\n    for (let existing of existingPositions) {\r\n      if (Math.abs(position.x - existing.x) < size && Math.abs(position.y - existing.y) < size) {\r\n        overlap = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    console.log(`Generated position: ${position.x}, ${position.y} after ${attempts} attempts for large bubble at ${originalPosition.x}, ${originalPosition.y}, ymax is ${ymax}, xmax is ${xmax}, ymin is ${originalPosition.y}, xmin is ${originalPosition.x}`);\r\n\r\n    attempts++;\r\n  } while (overlap && attempts < maxAttempts);\r\n\r\n\r\n  return {position, overlap};\r\n};\r\n\r\nexport const fetchPositionsFromFile = async (filename) => {\r\n  const response = await fetch(`${process.env.PUBLIC_URL}/position/${filename}`);\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok');\r\n  }\r\n  return await response.json();\r\n};"],"mappings":"AAAA;AAEA;AACA,MAAO,MAAM,CAAAA,YAAY,CAAGA,CAACC,GAAG,CAAEC,GAAG,GAAKC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,EAAIH,GAAG,CAAGD,GAAG,CAAG,CAAC,CAAC,CAAC,CAAGA,GAAG,CAE3F,MAAO,MAAM,CAAAK,8BAA8B,CAAGA,CAACC,IAAI,CAAEC,iBAAiB,CAAEC,aAAa,CAAEC,gBAAgB,GAAK,CAC1G,GAAI,CAAAC,QAAQ,CACZ,GAAI,CAAAC,OAAO,CACX,KAAM,CAAAC,WAAW,CAAG,IAAI,CACxB,GAAI,CAAAC,QAAQ,CAAG,CAAC,CAEhBC,OAAO,CAACC,GAAG,iDAAAC,MAAA,CAAiDV,IAAI,uBAAAU,MAAA,CAAqBR,aAAa,CAACS,KAAK,MAAAD,MAAA,CAAIR,aAAa,CAACU,MAAM,CAAE,CAAC,CAEnI,EAAG,CACDP,OAAO,CAAG,KAAK,CAEf,GAAI,CAAAQ,IAAI,CAAGX,aAAa,CAACS,KAAK,CAAGX,IAAI,CACrC,GAAI,CAAAc,IAAI,CAAGZ,aAAa,CAACU,MAAM,CAAGZ,IAAI,CAEtCI,QAAQ,CAAG,CACTW,CAAC,CAAEtB,YAAY,CAAC,CAAC,CAAEoB,IAAI,CAAC,CACxBG,CAAC,CAAEvB,YAAY,CAAC,CAAC,CAAEqB,IAAI,CACzB,CAAC,CAED,IAAK,GAAI,CAAAG,QAAQ,GAAI,CAAAhB,iBAAiB,CAAE,CACtC,GAAIL,IAAI,CAACsB,GAAG,CAACd,QAAQ,CAACW,CAAC,CAAGE,QAAQ,CAACF,CAAC,CAAC,CAAGf,IAAI,EAAIJ,IAAI,CAACsB,GAAG,CAACd,QAAQ,CAACY,CAAC,CAAGC,QAAQ,CAACD,CAAC,CAAC,CAAGhB,IAAI,CAAE,CACxFK,OAAO,CAAG,IAAI,CACd,MACF,CACF,CAEAG,OAAO,CAACC,GAAG,wBAAAC,MAAA,CAAwBN,QAAQ,CAACW,CAAC,OAAAL,MAAA,CAAKN,QAAQ,CAACY,CAAC,YAAAN,MAAA,CAAUH,QAAQ,mCAAAG,MAAA,CAAiCP,gBAAgB,CAACY,CAAC,OAAAL,MAAA,CAAKP,gBAAgB,CAACa,CAAC,eAAAN,MAAA,CAAaI,IAAI,eAAAJ,MAAA,CAAaG,IAAI,eAAAH,MAAA,CAAaP,gBAAgB,CAACa,CAAC,eAAAN,MAAA,CAAaP,gBAAgB,CAACY,CAAC,CAAE,CAAC,CAE3PR,QAAQ,EAAE,CACZ,CAAC,MAAQF,OAAO,EAAIE,QAAQ,CAAGD,WAAW,EAG1C,MAAO,CAACF,QAAQ,CAAEC,OAAO,CAAC,CAC5B,CAAC,CAED,MAAO,MAAM,CAAAc,sBAAsB,CAAG,KAAO,CAAAC,QAAQ,EAAK,CACxD,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAZ,MAAA,CAAIa,OAAO,CAACC,GAAG,CAACC,UAAU,eAAAf,MAAA,CAAaU,QAAQ,CAAE,CAAC,CAC9E,GAAI,CAACC,QAAQ,CAACK,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,6BAA6B,CAAC,CAChD,CACA,MAAO,MAAM,CAAAN,QAAQ,CAACO,IAAI,CAAC,CAAC,CAC9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}